/* Bellman-Ford Graph Algorithm to detect cycle in directed graph */

#include<bits/stdc++.h>
using namespace std;

int isNegativeWeightCycle(int n, vector<vector<int>>edges)
{
	    
	    vector<double>dist(n,INT_MAX); // Shortest distance array
	    dist[0]=0; // As we are assuming 0th vertex is start;
	    for(int i=0;i<n-1;i++)
	    {
	        //relaxaction of edges 
	        for(auto it:edges)
	        {
	            int u=it[0],v=it[1],wt=it[2];
	            if(dist[u]+wt < dist[v])
	            {
	                dist[v]=dist[u]+wt;
	            }
	        }
	    }
	    // to find neg-cycle do relaxation one more time.
       
	    for(auto it:edges)
	        {
	            int u=it[0],v=it[1],wt=it[2];
	            if(dist[u]+wt < dist[v])
	            return 1;
	        }
	         return 0;
}


int main()
{
		int n, m;// n is no. of vertices and m is no. of edges
		cin >> n >> m;
		vector<vector<int>>edges;
		for(int i = 0; i < m; i++)
    {
			int x, y, z;
			cin >> x >> y >> z;
			edges.push_back({x,y,z});
		}
	
		int ans = isNegativeWeightCycle(n, edges);
		cout << ans << endl;//if ans=1 means negative cycle present
}
